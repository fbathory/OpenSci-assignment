{"title":"OpenSci workshop assignment","markdown":{"yaml":{"title":"OpenSci workshop assignment","author":"Florencia Bathory","institution":"EDSD 2024/2025","format":{"html":{"theme":{"light":"united","dark":"vapor"},"code-tools":{"source":true,"toggle":false,"caption":"none"}}},"execute":{"message":false,"warning":false}},"headingText":"Packages","containsRefs":false,"markdown":"\n\nHere is the list of the packages used for this document\n```{r}\n#| echo: true\n#| warning: false\n#| message: false\n\nlibrary(sf)\nlibrary(spData)\nlibrary(countrycode)\nlibrary(flowmapblue)\nlibrary(flowmapper)\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(countrycode)\n```\n\n## Read the data\nNext I get the data that I am working with.\n```{r}\n#| echo: true\ndata_schmig <- read.csv(\"data_processed/openalex_2024_V1_scholarlymigration_countryflows_enriched.csv\")\n```\n\nI am interested in migration of scholars from and to Argentina, so I am filtering the database to obtain only these flows. Then I will use 2 datasets to distinct whether they are coming from or going to Argentina for the plots.\n\n```{r}\n\narg <- data_schmig |> \n filter(iso3codefrom == \"ARG\" | iso3codeto == \"ARG\")\n\narg_come <- arg |> \n filter(iso3codeto == \"ARG\")\n\narg_to <- arg |> \n filter(iso3codefrom == \"ARG\")\n```\n\n## Plots\n### Origin of coming migrants\nI want to know the region where the migrant scholars going to Argentina are from originally from. In order to do that, I have to handle a little bit more of the data in order to properly plot it.\n```{r}\n#| fig-cap: \"No. of migrants by year and region of origin\"\n#| fig-alt: \"No. of migrants by year and region of origin\"\n\narg_come_reg <- arg_come |> \n group_by(year, regionfrom, iso3codeto) |> \n summarise(n_migrations = sum(n_migrations))\n\nggplotly(ggplot(data = arg_come_reg) +\n geom_point(aes(x = year, y = n_migrations, color = regionfrom, shape = regionfrom, size = n_migrations,\n                text = paste(\"Region of origin: \", regionfrom,\"<br>No. of migrants: \", n_migrations)))+\n scale_shape_manual(\"Region of origin\", values = c(0, 1, 2, 4, 5, 6, 12))+\n scale_color_discrete(\"Region of origin\")+\n theme_bw()+\n guides(size = FALSE)+\n labs(x = \"Year\",\n      y = \"Number of migrants\"),\n tooltip = c(\"text\")\n )\n\n```\n\n### Destination of leaving migrants\n\n```{r}\n#| fig-cap: \"No. of migrants by year and region of destination\"\n#| fig-alt: \"No. of migrants by year and region of destination\"\n\narg_to_reg <- arg_to |> \n group_by(year, regionto, iso3codefrom) |> \n summarise(n_migrations = sum(n_migrations))\n\nggplotly(ggplot(data = arg_to_reg) +\n geom_point(aes(x = year, y = n_migrations, color = regionto, shape = regionto, size = n_migrations,\n                text = paste(\"Region of destination: \", regionto,\"<br>No. of migrants: \", n_migrations)))+\n scale_shape_manual(\"Region of destination\", values = c(0, 1, 2, 4, 5, 6, 12))+\n scale_color_discrete(\"Region of destination\")+\n guides(size = FALSE)+\n theme_bw()+\n labs(x = \"Year\",\n      y = \"Number of migrants\"),\n tooltip = c(\"text\")\n )\n```\n\n\n## Countries\nI get the countries, the centroids of those countries and adapt the iso code for the Argentina data frame to build the map\n\n```{r}\ncountries <- spData::world\n\ncountries_centroids <- countries |> \n  st_centroid() |> # finds a center of each country'spolygon\n  st_coordinates() |>  # extracts numeric coorindates from the POINT geometry\n  as.data.frame() |> # converts the matrix to a data.frame \n  setNames(c(\"lon\", \"lat\")) |> # renames the columns\n  cbind(countries) |> # adds back all the columns (except for geometry) form `countries`\n  select(iso_a2, lon, lat, name_long) |> # only selects a few columns that we really need\n  rename(\"id\" = iso_a2)\n\nflows_countries <- arg |> \n mutate(\n    iso2codefrom = countrycode(iso3codefrom,\n      origin = \"iso3c\",\n      destination = \"iso2c\"),\n    iso2codeto = countrycode(iso3codeto,\n      origin = \"iso3c\",\n      destination = \"iso2c\")\n  )\n```\n### Flowmap\n\nGet started with MapBox\n```{r}\nSys.setenv(MAPBOX_TOKEN = \"pk.eyJ1IjoiZmJhdGhvcnkiLCJhIjoiY20xa205OWNrMG03NzJrc2U3dm4zY2M2ZyJ9.t8Ss_lYW5FHp1GaDYxPT_g\")\n```\n\nI arrange the df and plot the flowmap\n```{r}\n\narg_flows <- flows_countries |>\n  group_by(origin = iso2codefrom, dest = iso2codeto) |>\n  summarise(count = sum(n_migrations, na.rm = TRUE), .groups = \"drop\") |> \n  collect()\n\nflowmap <- flowmapblue(\n  locations = countries_centroids,\n  flows = arg_flows,\n  mapboxAccessToken = Sys.getenv(\"MAPBOX_TOKEN\"),\n  darkMode = TRUE,\n  animation = FALSE,\n  clustering = TRUE\n  )\n\nhtmlwidgets::saveWidget(flowmap, \"flowmap.html\")\n\nshiny::tags$iframe(src = \"flowmap.html\", width = \"100%\", height = \"600px\")\n```\n\n","srcMarkdownNoYaml":"\n\n## Packages\nHere is the list of the packages used for this document\n```{r}\n#| echo: true\n#| warning: false\n#| message: false\n\nlibrary(sf)\nlibrary(spData)\nlibrary(countrycode)\nlibrary(flowmapblue)\nlibrary(flowmapper)\nlibrary(shiny)\nlibrary(tidyverse)\nlibrary(plotly)\nlibrary(countrycode)\n```\n\n## Read the data\nNext I get the data that I am working with.\n```{r}\n#| echo: true\ndata_schmig <- read.csv(\"data_processed/openalex_2024_V1_scholarlymigration_countryflows_enriched.csv\")\n```\n\nI am interested in migration of scholars from and to Argentina, so I am filtering the database to obtain only these flows. Then I will use 2 datasets to distinct whether they are coming from or going to Argentina for the plots.\n\n```{r}\n\narg <- data_schmig |> \n filter(iso3codefrom == \"ARG\" | iso3codeto == \"ARG\")\n\narg_come <- arg |> \n filter(iso3codeto == \"ARG\")\n\narg_to <- arg |> \n filter(iso3codefrom == \"ARG\")\n```\n\n## Plots\n### Origin of coming migrants\nI want to know the region where the migrant scholars going to Argentina are from originally from. In order to do that, I have to handle a little bit more of the data in order to properly plot it.\n```{r}\n#| fig-cap: \"No. of migrants by year and region of origin\"\n#| fig-alt: \"No. of migrants by year and region of origin\"\n\narg_come_reg <- arg_come |> \n group_by(year, regionfrom, iso3codeto) |> \n summarise(n_migrations = sum(n_migrations))\n\nggplotly(ggplot(data = arg_come_reg) +\n geom_point(aes(x = year, y = n_migrations, color = regionfrom, shape = regionfrom, size = n_migrations,\n                text = paste(\"Region of origin: \", regionfrom,\"<br>No. of migrants: \", n_migrations)))+\n scale_shape_manual(\"Region of origin\", values = c(0, 1, 2, 4, 5, 6, 12))+\n scale_color_discrete(\"Region of origin\")+\n theme_bw()+\n guides(size = FALSE)+\n labs(x = \"Year\",\n      y = \"Number of migrants\"),\n tooltip = c(\"text\")\n )\n\n```\n\n### Destination of leaving migrants\n\n```{r}\n#| fig-cap: \"No. of migrants by year and region of destination\"\n#| fig-alt: \"No. of migrants by year and region of destination\"\n\narg_to_reg <- arg_to |> \n group_by(year, regionto, iso3codefrom) |> \n summarise(n_migrations = sum(n_migrations))\n\nggplotly(ggplot(data = arg_to_reg) +\n geom_point(aes(x = year, y = n_migrations, color = regionto, shape = regionto, size = n_migrations,\n                text = paste(\"Region of destination: \", regionto,\"<br>No. of migrants: \", n_migrations)))+\n scale_shape_manual(\"Region of destination\", values = c(0, 1, 2, 4, 5, 6, 12))+\n scale_color_discrete(\"Region of destination\")+\n guides(size = FALSE)+\n theme_bw()+\n labs(x = \"Year\",\n      y = \"Number of migrants\"),\n tooltip = c(\"text\")\n )\n```\n\n\n## Countries\nI get the countries, the centroids of those countries and adapt the iso code for the Argentina data frame to build the map\n\n```{r}\ncountries <- spData::world\n\ncountries_centroids <- countries |> \n  st_centroid() |> # finds a center of each country'spolygon\n  st_coordinates() |>  # extracts numeric coorindates from the POINT geometry\n  as.data.frame() |> # converts the matrix to a data.frame \n  setNames(c(\"lon\", \"lat\")) |> # renames the columns\n  cbind(countries) |> # adds back all the columns (except for geometry) form `countries`\n  select(iso_a2, lon, lat, name_long) |> # only selects a few columns that we really need\n  rename(\"id\" = iso_a2)\n\nflows_countries <- arg |> \n mutate(\n    iso2codefrom = countrycode(iso3codefrom,\n      origin = \"iso3c\",\n      destination = \"iso2c\"),\n    iso2codeto = countrycode(iso3codeto,\n      origin = \"iso3c\",\n      destination = \"iso2c\")\n  )\n```\n### Flowmap\n\nGet started with MapBox\n```{r}\nSys.setenv(MAPBOX_TOKEN = \"pk.eyJ1IjoiZmJhdGhvcnkiLCJhIjoiY20xa205OWNrMG03NzJrc2U3dm4zY2M2ZyJ9.t8Ss_lYW5FHp1GaDYxPT_g\")\n```\n\nI arrange the df and plot the flowmap\n```{r}\n\narg_flows <- flows_countries |>\n  group_by(origin = iso2codefrom, dest = iso2codeto) |>\n  summarise(count = sum(n_migrations, na.rm = TRUE), .groups = \"drop\") |> \n  collect()\n\nflowmap <- flowmapblue(\n  locations = countries_centroids,\n  flows = arg_flows,\n  mapboxAccessToken = Sys.getenv(\"MAPBOX_TOKEN\"),\n  darkMode = TRUE,\n  animation = FALSE,\n  clustering = TRUE\n  )\n\nhtmlwidgets::saveWidget(flowmap, \"flowmap.html\")\n\nshiny::tags$iframe(src = \"flowmap.html\", width = \"100%\", height = \"600px\")\n```\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"message":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":{"source":true,"toggle":false,"caption":"none"},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","title":"OpenSci workshop assignment","author":"Florencia Bathory","institution":"EDSD 2024/2025","theme":{"light":"united","dark":"vapor"}},"extensions":{"book":{"multiFile":true}}}},"projectFormats":[]}